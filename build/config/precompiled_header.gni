declare_args() {
  disable_precompiled_headers = false
}

# Define a config setting up a precompiled header.
#
# Precompiled headers are done on a per-target basis. If you have just a couple
# of files, the time it takes to precompile (~2 seconds) can actually be longer
# than the time saved. On a Z620, a 100 file target compiles about 2 seconds
# faster with precompiled headers, with greater savings for larger targets.
#
# Recommend precompiled headers for targets with more than 50 .cc files.
#
# precompiled_header (required)
#     A string referring to the header file.
#
# precompiled_source (required)
#     GN path of a source file which will be compiled to a PCH.
template("precompiled_header") {
  assert(defined(invoker.precompiled_header),
         "Need precompiled_header in $target_name.")
  assert(defined(invoker.precompiled_source),
         "Need precompiled_header in $target_name.")

  config(target_name) {
    if (!disable_precompiled_headers) {
      # This is a string rather than a file GN knows about. It has to match
      # exactly what's in the /FI flag below, and what might appear in the source
      # code in quotes for an #include directive.
      precompiled_header = invoker.precompiled_header

      # This is a file that GN will compile with the above header. It will be
      # implicitly added to the sources (potentially multiple times, with one
      # variant for each language used in the target).

      # TODO(tim): Dirty hack to mark the variable as used.
      precompiled_source = invoker.precompiled_source
      precompiled_source = invoker.precompiled_header
    }
  }
}
